// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1477.Robot;

import com.ctre.CANTalon;
import com.ctre.phoenix.motorcontrol.NeutralMode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainFrontLeft;
    public static SpeedController driveTrainRearLeft;
    public static SpeedController driveTrainFrontRight;
    public static SpeedController driveTrainRearRight;
    public static RobotDrive driveTrainRobotDrive;
    public static Encoder driveTrainLeftEncoder;
    public static Encoder driveTrainRightEncoder;
    public static AnalogGyro driveTrainGyro;
    public static Compressor driveTrainCompressor;
    public static SpeedController driveTrainHDrive;
    public static DoubleSolenoid intakeIntakeGrip;
    public static DoubleSolenoid intakeIntakeExtender;
    public static SpeedController intakeLeftIntake;
    public static SpeedController intakeRightIntake;
    public static DoubleSolenoid armGripSolenoid;
    public static Encoder armArmEncoder;
    public static Encoder armArmRotatorEncoder;
    public static SpeedController armArmRotator;
    public static SpeedController armDownMotor;
    public static SpeedController armUpMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon canMotor;
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFrontLeft = new VictorSP(0);
        LiveWindow.addActuator("DriveTrain", "Front Left", (VictorSP) driveTrainFrontLeft);
        driveTrainFrontLeft.setInverted(false);
        driveTrainRearLeft = new VictorSP(1);
        LiveWindow.addActuator("DriveTrain", "Rear Left", (VictorSP) driveTrainRearLeft);
        driveTrainRearLeft.setInverted(false);
        driveTrainFrontRight = new VictorSP(2);
        LiveWindow.addActuator("DriveTrain", "Front Right", (VictorSP) driveTrainFrontRight);
        driveTrainFrontRight.setInverted(false);
        driveTrainRearRight = new VictorSP(3);
        LiveWindow.addActuator("DriveTrain", "Rear Right", (VictorSP) driveTrainRearRight);
        driveTrainRearRight.setInverted(false);
        driveTrainRobotDrive = new RobotDrive(driveTrainFrontLeft, driveTrainRearLeft,
              driveTrainFrontRight, driveTrainRearRight);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(1.0);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainLeftEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Left Encoder", driveTrainLeftEncoder);
        driveTrainLeftEncoder.setDistancePerPulse(1.0);
        driveTrainLeftEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "Right Encoder", driveTrainRightEncoder);
        driveTrainRightEncoder.setDistancePerPulse(1.0);
        driveTrainRightEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainGyro = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);
        driveTrainCompressor = new Compressor(2);
        LiveWindow.addActuator("DriveTrain", "Compressor", driveTrainCompressor);
        
        driveTrainHDrive = new VictorSP(7);
        LiveWindow.addActuator("DriveTrain", "HDrive", (VictorSP) driveTrainHDrive);
        driveTrainHDrive.setInverted(false);
        intakeIntakeGrip = new DoubleSolenoid(2, 2, 3);
        LiveWindow.addActuator("Intake", "Intake Grip", intakeIntakeGrip);
        
        intakeIntakeExtender = new DoubleSolenoid(2, 4, 5);
        LiveWindow.addActuator("Intake", "Intake Extender", intakeIntakeExtender);
        
        intakeLeftIntake = new VictorSP(5);
        LiveWindow.addActuator("Intake", "Left Intake", (VictorSP) intakeLeftIntake);
        intakeLeftIntake.setInverted(false);
        intakeRightIntake = new VictorSP(6);
        LiveWindow.addActuator("Intake", "Right Intake", (VictorSP) intakeRightIntake);
        intakeRightIntake.setInverted(false);
        armGripSolenoid = new DoubleSolenoid(2, 0, 1);
        LiveWindow.addActuator("Arm", "Grip Solenoid", armGripSolenoid);
        
        armArmEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Arm", "Arm Encoder", armArmEncoder);
        armArmEncoder.setDistancePerPulse(1.0);
        armArmEncoder.setPIDSourceType(PIDSourceType.kRate);
        armArmRotatorEncoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Arm", "Arm Rotator Encoder", armArmRotatorEncoder);
        armArmRotatorEncoder.setDistancePerPulse(1.0);
        armArmRotatorEncoder.setPIDSourceType(PIDSourceType.kRate);
        armArmRotator = new VictorSP(4);
        LiveWindow.addActuator("Arm", "Arm Rotator", (VictorSP) armArmRotator);
        armArmRotator.setInverted(false);
        armDownMotor = new VictorSP(9);
        LiveWindow.addActuator("Arm", "Down Motor", (VictorSP) armDownMotor);
        armDownMotor.setInverted(false);
        armUpMotor = new VictorSP(10);
        LiveWindow.addActuator("Arm", "Up Motor", (VictorSP) armUpMotor);
        armUpMotor.setInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        canMotor = new CANTalon(5);  
        canMotor.setInverted(false);
        canMotor.setNeutralMode(NeutralMode.Brake);
        
    }
}
