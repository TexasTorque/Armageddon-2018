// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1477.Robot.subsystems;

import org.usfirst.frc1477.Robot.RobotMap;
import org.usfirst.frc1477.Robot.commands.MoveArm;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final int second = 25000;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid gripSolenoid = RobotMap.armGripSolenoid;
    private final Encoder armEncoder = RobotMap.armArmEncoder;
    private final Encoder armRotatorEncoder = RobotMap.armArmRotatorEncoder;
    private final SpeedController armRotator = RobotMap.armArmRotator;
    private final SpeedController rightMotor = RobotMap.armDownMotor;
    private final SpeedController leftMotor = RobotMap.armUpMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private int armEncoderValue;
    private double armEncoderRate;
    private int rotatorEncoderValue;
    private double rotatorEncoderRate;
    private int rotationSetpoint; //Setpoint means position
    private int extendSetpoint;
    private int prevRotationSetpoint;
    private int prevExtendSetpoint;
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new MoveArm(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
    	armEncoderValue = armEncoder.get();//Updates the arm extender encoder value
    	armEncoderRate = armEncoder.getRate();//Updates the rate the arm is extending at
    	rotatorEncoderValue = armRotatorEncoder.get();//Updates  the arm rotator encoder value
    	rotatorEncoderRate = armRotatorEncoder.getRate();//Updates the rate the arm is rotation
    	if (armEncoderValue == rotationSetpoint) { //Checks if the arm extended to meet the setpoint
    		armRotator.set(0);//Stops the extender
    	}
    	if (rotatorEncoderValue == extendSetpoint) { //Checks if the arm rotated to meet the setpoint
    		leftMotor.set(0);//Stops the left motor
    		rightMotor.set(0);//Stops the right motor
    	}
    	if (prevRotationSetpoint != rotationSetpoint) {
    		while(armEncoder.get() != rotationSetpoint) {
    			if(armEncoder.get() <=0)
    				armRotator.set(0);
    			if (rotationSetpoint - prevRotationSetpoint < 0)
    				armRotator.set(-.1);
    			else 
    				armRotator.set(.1);
    		}
    		armRotator.set(0);
    		prevRotationSetpoint = rotationSetpoint;
    	}
    	if (prevExtendSetpoint != extendSetpoint) { //Check the comments in the last if statement
    		while(armRotatorEncoder.get() != rotationSetpoint) {
    			if(armRotatorEncoder.get() <=0) {
    				leftMotor.set(0);
    				rightMotor.set(0);
    			}
    			if (rotationSetpoint - prevRotationSetpoint < 0) {
    				leftMotor.set(-.1);
					rightMotor.set(-.1);
    			}
    			else { 
    				leftMotor.set(.1);
					rightMotor.set(.1);
    			}
    		}
    		leftMotor.set(0);
    		rightMotor.set(0);
    		prevExtendSetpoint = extendSetpoint;
    	}
    	System.out.println(rotationSetpoint);
    }
    public double getExtensionEncoderValue() {
    	return armEncoderValue;
    }
    public double getRotatorEncoderValue() {
    	return rotatorEncoderValue;
    }
    public double getRotatorSetpoint() {
    	return rotationSetpoint;
    }
    public double getExtensionSetpoint() {
    	return extendSetpoint;
    }
    public void grabAndRelease() {
    	if (gripSolenoid.get() == Value.kForward)
    		gripSolenoid.set(Value.kReverse);
    	else
    		gripSolenoid.set(Value.kForward);
    }
    public void setArmShift(int position) {
    	extendSetpoint = position;
    }
    public void setArmRotation(int position) {
    	//rotationSetpoint = position;
    	armRotator.set(position/100);
    }
    public void stop() {
    	setArmRotation(0);
    	setArmShift(0);
    	gripSolenoid.set(Value.kOff);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

