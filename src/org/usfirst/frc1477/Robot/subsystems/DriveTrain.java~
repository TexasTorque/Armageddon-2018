// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1477.Robot.subsystems;

import org.usfirst.frc1477.Robot.RobotMap;
import org.usfirst.frc1477.Robot.commands.ArcadeDrive;

import com.ctre.CANTalon;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final int second = 25000;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController frontLeft = RobotMap.driveTrainFrontLeft;
    private final SpeedController rearLeft = RobotMap.driveTrainRearLeft;
    private final SpeedController frontRight = RobotMap.driveTrainFrontRight;
    private final SpeedController rearRight = RobotMap.driveTrainRearRight;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    private final Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    private final AnalogGyro gyro = RobotMap.driveTrainGyro;
    private final Compressor compressor = RobotMap.driveTrainCompressor;
    private final SpeedController hDrive = RobotMap.driveTrainHDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private int Left_Encoder_Value;
    private double Left_Encoder_Rate;
    private int Right_Encoder_Value;
    private double Right_Encoder_Rate;
    private final CANTalon CAN_Motor = RobotMap.canMotor;
    private int i = 0;
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        compressor.setClosedLoopControl(true);
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    	Left_Encoder_Value = leftEncoder.get(); // 50 updates in 1 second
    	Left_Encoder_Rate = leftEncoder.getRate();
    	
    	Right_Encoder_Value = rightEncoder.get(); // 50 updates in 1 second
    	Right_Encoder_Rate = rightEncoder.getRate();
    	i++;
    	/*if (i >= second) {
    		System.out.println(Encoder_Value);
    	}*/
    	
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void start() {
    }
    public void arcadeDrive(Joystick stick) {
    	robotDrive.arcadeDrive(stick.getRawAxis(1), stick.getRawAxis(4));
    }
    public void driveStraight(double speed) {
    	robotDrive.tankDrive(speed, speed);
    }	
    public double getGyro() {
    	return gyro.getAngle();
    }
    public void startCompressor() {
    	compressor.start();
    	
    }
    public void stopCompressor() {
    	compressor.stop();
    }
    public boolean getCompressor() {
    	return compressor.enabled();
    }
   
    public void stop() {
    	robotDrive.free();
    	frontLeft.disable();
    	rearLeft.disable();
    	frontRight.disable();
    	rearRight.disable();
    	stopCompressor();
    }
	public void autonomous() {
    	for (int i = 0; i < second*5; i++) {
    		robotDrive.drive(.2, 0.0);
    	}
    	for (int i = 0; i < second*5; i++) {
    		robotDrive.drive(.3, 0.5);
    	}
    	for (int i = 0; i < second*5; i++) {
    		robotDrive.drive(.4, -0.5);
    	}
    }
}

